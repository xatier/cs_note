9/23
====

disassemble
reverse assambly to C
IDA pro
tips for static analtisis



static analysis
  analysis malware without execution
dynamic analysis
  execute it

what info we can get from static analysis
  string
  function
  file structure: PE, ELF ...
  related modules
  binary code


what we can't get
  register, memory, packed code, encrypted message


reverse: Linux, Windows
pwned: Linux, Windows (rare)

complement to the dynamic analysis



Linux command
  strings
  file: filesystem, magic number, ...
  xxd
  ldd: print sared library dependencies
  objdump
    -D: disassemble
    -R: key of sharing libs (GOT hijack)


disassemble is a procedure to convert binary machine code into assembly code
** may wrong

linear sweep (do not understand program flow)
    objdump
    might not play with garbage bytes

recursive traversal (try to understand program flow)
trace special instructions like jump ...
    might wrong if the destination of a jump is dynamic determined
    jmp DWARD [esp]


reverse asm to C
EIP

memory layout
stack, heap, BSS, data

local variable/arguments

caller push argument into stack
caller push eip by call instruction
callee save/push the caller's ebp
callee reserve save for local variables
sub

parm
parm
parm
ret eip
caller's ebp
local
local
local

ebp - -> local variable
ebp + -> parameter

mov
lea

arthematic instructions

control instructions
flags, test, cmp
branch instruction

stack: push/population
call ret, ret num (esp + num)[resume space for local variables]

function prologue
store current EBP
save ESP to current EBP
leave sace for local variables

push ebp
mov ebp, esp
sub esp, X


function epilogue
set esp to ebp
ret


calling convension
stdcall, cdecl,pascal,fastcall
fastcall: put your parameters in registers
stdcall: put your parameters in the stack


branch

do / for loop



hexray decompiler

IDA pro

decompiler result is not perfect
most of time is buggy
lack of source code level info

may not support


reversing concept
identify important part of the program (data)
strings: key, flags
functions to read input: scanf(), gets()
functions for networking: recv(), send()

backward tracking user data
most program vulns must be triggered by user input
keep track about variables affect by your input: data propagate
data dependency


forward tracking interesting API functions
strcpy(), memcp(), scanf(), printf(), strcat()

try to trigger these function
analysis control flow and make strategy to enforce program goto these functions

convert back to C code
gather info
    IAT(import address table), strings, dynamic analysis
    identify function of interesting
    identify calls
    identify algorithms and data structures
    pseudo-code it
    rename functions, arguments, variables



encryption, self-modified code :(
lack of runtime info :(
take lots of time to understand programs :(

overview of program flow

hybrid with dynamic analysis




9/30
====

dynamic analysis

influence the real program
code coverage depends on input data
need an environment for executing the program


ltrace
strace

windows: process monitor, process explorer

valgrind

check library calls with ltrace, ex. file read/write, socket events


debugger

windows:
  windbg, ollydbg, immunity debugger, ida pro

linux:
  gdb, gdbtui, kgdb


gdb
  breakpoint
    b *address if $eax = 5566
  watch
  enable | disable
  delete
  run
  continue
  nexti
  stepi
  finish

set $eax = 5566
set *0xffff5566 5566


info registers
info stack
info breakpoint
info args
info local
info proc map

disas
list
display


x/s address: examine memory as string


memory layout

text / data / bss / heap / stack

GOT: global offset table



10/7
====

reverse engineering

strace/ltrace -> pseudo code -> sandbox / process monitor -> run and fuzz


try to find... injection, overflow, race condition, logic vulnerabilities

overflow
  integer, stack, heap, off by one


how to trigger the vuln?
(gdb) info stack


filter, authentication, memory permission, DEP (Data Execution Prevention), stack guard, ASLR

NULL pointer kernel exploit: try to set 0x00000000 to a function first, then try to jump to it

control variables: bypass some checks

read / write memory

control EIP



10/14
=====

fuzzing / exploit / fault

failure (crash)

exploit generation

the CRAX platorm

symbolic EIP


10/21
=====

stack overflow

unsafe / safe functions


10/28
====

memory maps

  cat /proc/$pid/maps

Data Execution Prevention (Non-Executable, NX protection)

bypass DEP

ret2text
ret2libc

ASLR (Address Space Layout Randomization)

randomize stack, heap, libraries

/proc/sys/kernel/randomize_va_space
- 0: Disable ASLR.
- 1: Randomize the positions of the stack, VDSO page, and shared memory regions
- 2: 1 + data segment

default: 2

Position Independent Executable
position-independent code
gcc -fpie -pie test.c

Conquer ASLR 
- Information leak -> calculate needed offsets
- fork -> same memory layout


format strings

the printf family

printf, sprinf, snprinf, vsprintf, fprintf ...

try some %p on input

(gdb) x/20xw $esp

%N$s or %N$x: leak info
%n: returns the number of characters written so far by this call to the function.

{addr} % M $ x
{addr} % N c % M $ hhn

brute force N and M

M: offset
N: value we want to write (in decimal)

%100c%30$hhn%220c%31$hhn
write 100 :(0x64) to Offset 30
write (100 + 220) % 256 : (0x40) to Offset 31


attacking rules:

1. use %N$x to dump stack memory, the target we want to overwrite
2. if our target is on the stack, modify it by %N$n, otherwise, try to make the address of the target appearing on stack
3. use %Nc%N$hhn to overwrite the target


ret2libc + fmt string exploit
control the stack
call printf by ret2libc
read/write memory by fmt exploit
try to leak more info to bypass DEP/ASLR






























