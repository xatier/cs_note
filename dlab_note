3/1
======
HDL
    describe the design of digital systems in a textual form
    hardware structure
    function behavior
    timing

a documentation language for ma /machine
used in the design flow of an integrated circuit
    disign entry logic simulation, logic synthesis, and timing verfication
VHDL and Verilog HDL

specification -> RTL design and simulation -> logic synthesus -> gate level simulation
    -> ASIC layout (like TSMC) or FPGA Implementation


Verilog
module declaration

gate level functions
time delay (timescale directive)

tech bench for simulation

naming preference: t_
keywords: wire, reg
unique instance name


remember to write test bench after labs

'assign' is parallel

modules with boolean expressions

generel rules

user defined primitives (查表)

bultin functions => system pre-defined primitives

synthesis and HDLS
    device independent representation of digital logic

verilog code -> compilation and synthesis -> netlist -> mapping -> targets (FPGA, PAL, ASIC ...)

HDL description is compiled into a netlist
synthesis optimizes the logic
mapping to specified platform

FPGA: builtin components are called macros
    components are not interconnect each other before synthesisation
    macors are interconnect by synthesis tools

infer macros: choose the FPGA macros that efficiently implement various parts of the HDL codes
place and route
    with area and/or speed in mind, choose the needed macros by location and route the interconnect
    tools will choose macros which are close to reduce propagation delay


modules: element or collection of lower level design blocks
    Verilogs: interconnected modules
    declare ane name a module, list its ports
    comment start wih //
    specify each port as input, output, or inout
    behavior: each statement executes in parallel!

continuous assignments: 'assign' keyword (dataflow assignment)
    easy to represent cobinational logic
    the taget of a continuous assignment is a net dirven by cobinational logic
    LHS: scalar or vector net or a concatenation of scalar or vector net
        can't be a register!
    RHS: net or register
    dataflow operators are fairly low-level
        conditiona;  ? :
        boolean logic: ~ & |
        arithmetic: + - *

Verilog supports basic logic gates as primitives
Net represents conditions between hardware elements.
Nets are declared with 'wire'

behavior model
procedural assignment with 'always'
    initial, always
    support  if, for, while, case
    sensitivity list: any of the value inside change, the block shoult be re-run!
    statements within the always block is ordered, that is, statements are ececuted sequentially
    
registers
    in digital design (hardware viewpoint) memory elements
    register means a variable in Verilog
    don't need a clock and don't need to be driven like a net.
    can be changed at any time

procedural description ; continuous desciption

case and if-else
n-bit signals
    vector

 carry-in, carry-out

    priority logic
    if-else and case are interpreted very literally
    beware of unintended priority logic
    make sure if-clse/case are parallel
    mutually exclusive conditions are chosen for each branch

Xilinx project

create project
Top module -> HDL
spartan3E
不要選錯  FPGA spec

add source code

4-bit full adder -> 1bit 來作

跑模擬
    test fixture
    top model  要選 4bit


3/8
=========
HDL 寫作想法跟 一般 programing 不太一樣
Ex. don't care condition?

different code (but logical equqlity) may cause different circuits by synthesis tools
give hints to the synthesis as more as possible

beware of unintended priority logic

sensitivity list: 一旦其中有一個有變化的話就會跑一次 always block 裡面的東西

~  bitwise not
!  logical not
&  reduction ( &(4'b0101) => 0 & 1 & 0 & 1 -> 1'b0 )
comparisoin operators
equqlity operators
    === case inequality (compare bit by bit)
    == equality

always 裡面的  = 之  LHS, 需要用 register

一個行為可以透過 gate-level / dataflow / behavior 三種來描述
continuous assignment 'assign' (dataflow model)
procedural assignment 'always' (behavior model), care about sensitivity list
incomplete specification of case or if => non combinational logic
register in verilog is not means registers in CPU
modeling before write codes



modeling styles
    gate-level
        good for synthesis tools (?
    dataflow-model
        assign
    behavior-model
        always

當 synthesis tools 了意志... (ry


vectors: identifiers having multiple bits widths
bottom-up hierachical description

nets
    wire wor wand (? WTF...
	
wire, tri          Interconnecting wire - no special resolution function
wor, trior         Wired outputs OR together (models ECL)
wand, triand       Wired outputs AND together (models open-collector)
tri0, tri1         Net pulls-down or pulls-up when not driven
supply0, supply1   Net has a constant logic 0 or logic 1 (supply strength)
trireg             Retains last value, when driven by z (tristate).


repeat keyword

initial -> in testbench
$display / $write / $monitor / $time / $finish
$write 類似 $display 不換行
$monitor -> 像是 gdb 的 watch
parameter

filp-flop edge triggered
latch level sensitive
register

sequential always block

don't use sensitive list
    -> posedge clk
    -> negedge

<= : sequential   // nonblocking
= : combinational // blocking

synchronous clear
asynchronous clear => 用 sensitive list




3/15
============
combinational / sequential
list / clk
always @ (a or b or sel)    always @ (posedge clk)


asynchronous
always @ (negedge clearb or posedge clock)
clearb => immediately enter the block when clearb is asserted


blocking / nonblocking
=   blocking eval the statements step by step
<=  nonblocking eval all statements and do the assignment parallelly

ripple counter
    large skew

74163 catalog counter
synchronous load and clear bits
positive edge triggered Flip flop
parallel load date
enable inputs: both must be asserted to enable counting
ripple carry output (RCO) when 1111

163 counter

flip-flop & latches

behavior modeling
single pass behavior <- declared by initial
    not synthesizable
     stimute signals
cyclic behavior <- declared by always

always @ -> sensitive list
forever -> never finnish executing


# delay control operator
@ event control operator

jk flip flop

FSM
    finite state machines
    each clock edge, combinational logic computes outputs
    next state as a function of inputes and pressent state


input -> combinational logic -> output
      |                      |
present state             feed back
                             |
clock  ->    flip-flop  <----+

Moore / Mealy FSM
Mealy is more earlier one clock than Moore.


level to puler converter

state transition diagram is a useful FSM representation

state reduction

FSM are eazy in Verilog (?
state register
next-state

states defined with parameter keyword
state register defined with parameter keyword
output combinational
next-state logic within a combinational always block

use moore machine


3/22
=============
mealy machine VS moore machine

mealy machines use less states

output glitching
combinational logic for outputs may cause this problem
解法：先 latch 著他

calculate outputs based on next status

synchronous all asynchronous input
    use two back to back registers

moore function of current state
mealy function of current state and input

registers outputs combinational logic for critical signals
skew / jitter problems



registers / counters


behavioral model
    operations / function table
structural level description
    components (gates, flip-flops, MUXs)

shift register
    A_par <= {MSB_in, A_par[3:1]}   // right shift
    A_par <= {A_par[2:0], LSB_in}   // left shift

   {} : concatenation


in practice, a designer develops only the behavioral model
    efficiency -> maybe use structual description

ripple counter


HDL
    description of hardwares
    the behavior
    cost / performance
    hierachical building
    easy to create very ugly code
    is not a software programming language
    modeling the hardware semantics


always block
    never mix up combinational logic and sequential logic :\



3/29
==================
verilog review
    gate level
    dataflow level
    behavior level

    always block
    parallel!

    sensitive list

combinational circuit

sequential circuit

mealy machines / moore machines

要有 circuit 在你心中 

asynchronous

FPGA
    off the shelf
    low development cost
    short time to market
    reconfigurability

ASICs
    high performance
    low power
    low cost in high volumes

FPGA are perfect for rapid prototyping

4/12
==========
review ASIC vs FPGA

what is an FPGA
    configurable logic blocks (CLB)
    I/O blocks (IOB)
    block RAM (BRAM)
    Multipilers blocks
    digital block manager (DCM)
    ...


4 slice each configurable logic block

LUT(loop up table), MUX REG
    carry & control
    storage element

    可以 implement 任何的 logic

    LUT are primary elements for logic implementation
    can implement any function of 4 input

    兩個合起來用: 更多 bit 加上 mux (選結果)

distributed RAM
    CLB configurable as distributed RAM
synchronous write
synchronous / asynchronous read
    accompanying flip-flops used for synchronous read

shift register
    dynamically addressable
    register rich FPGA
    當成 delay
    data path must be balanced to keep desired functionality
    allow for addition of pipeline stages to increase throughput


fast carry flag
    carry logic is independent of normal and routing resources

IO blocks

RAM blocks


FPGA design flow
    specification
    VHDL description
    functional simulation
    synthesis
    post synthesis simulation

    -> make chips

	synthesis -> netlist

memory and programmable logic

    PLA
    PAL
    field programmable gate array

    memory address model
    read/write operation


memory unit access is controlled by an external device (MMU?)

access time
    required time to select a word and read it

cycle time
    required time to complete a write operation

static memory / dynamic memory
SRAM
    information stored in latches
    remains valid as long as power is applied
    short read write cycle
    like cache in our computers
DRAM
    information stored in the form of charges on capacitors
    the stored charge tends to discharge with time 
    need to be refreshed (read and write back)
    reduced power consumption
    large memory capacity

a memory unit
    storage components
    the decoding circuits to select the memory word
    a memory cell

a ram of m words and n bits per word
    m*n binary storage cells
    need k-to-2^k decoders
    
    10-to-1024 can be replaced by 2*(5-to-32)
    reduce the circuit complexity and the cycle time

    reduece the number of pins in the IC packages

    RAS row address strobe
    CAS column addredd strobe
    multiplex the address line in one set
    more details will be in the computer architecture course


error detection and correction
    improve the reliability of a memory unit
    parity bit
    multiple parity check bits
    the check bits generate a unique pattern, called a syndrome
    the specific bit in error can be indentified

hamming code
    k-parity bits are add to an n-bit data word
    2^k - 1 > n+k
    the bit position arenumbered in dequence form 1 to n+ k
    those positions numbered as a power of 2 are reserved for the parity
    the remaining bits are the data bits


4/26
========
memory read/write cycle

static/dynamic memory

ROM
    read only memory
    2^k x n ROM
    k address input lines
    enable input
    three state outputs

    5-to-32 decoder
    8 or gates, each has 32 inputs
    fuses are programmable -> close or open

rom = decoder + or gates
    sum of miniterms
    a boolean function =  sum of minitrems
    for n-input, m-output -> 2^n X m ROM

design
    size of ROM -> truth table -> fuse pattern
    可以先觀察 function 特性，節省不必要的 ROM


types of ROM
    mask programming ROM
        IC manufacturers
        is economical only if large quantities
    PROM (programmable ROM)
        fuse
    EPROM (erasable PROM)
        floating gate
        ultraviolet light erasasble
    EEPROM (electrically erasable PROM)
        longer time is need to write
        flash ROM
        limited times of write operations

combinational PLDs
    (fixed AND array)decoder + or array
    (programmable AND array) + fixed OR array
    (prigrammable AND array) + (programmable OR array)

PLA
    AND product terms
    OR  sum terms

principle of locality
    program access a relatively small portion of the address space at any instant of time

cache

temporal locality
spatial locality


5/3
=========
I/O
PS2 / UART / VGA

PS/2 keyboard

keyboard_clk
scan_code [7:0]
keyboard_data
scan_ready


data transfer (FPGA to VGA)

put data in the ram

clock 
VGA_Red / Green / Blue
HS   ; horizontal
VS
Pixel clock

serial to parallel
RS232

signal protocol
data is valid on negative edge of clock
11-bit packet
    start bit
    data
    parity bit
    stop bit


100 msec 會送 scancode 出去

press: 11-bit code
release: two 11-bitcodes (F0 + key)


monochrome CRT monitor
    horizontal, vertical scanning

    hsync, vsync

vga controller
vga sync circuit
pixel generation circuit



5/10
=========
Finite state machine

divede circuit into combinational logic and state(sequential logic)
implementation of storage elements leads to various forms of sequential logic

synchronous / asynchronous sequential logic

representation
states
    sequential storage elemtns
    transitions (change of state)
    clock controls when state can change by controlling storage elements

inputs: sequence of input values, reset
outputs: states
memory: mst remember combination or always have it available as an input


internel structure
    data-path
        storage for combination
        comparasion
    control
        finite state machie controller
        control of data-path
        state changes controlled by clock

moore: outputs depends on current state only
mealy: outputs depends on current state and input state

digital system is sequential logic system constructed with flip-flops and gates
modular subsystems
registers, decoders, multiplexers, arithmetic elements and control logic
interconnected with data-path and control signals

staement
transfer

RTL operations use a combination of behavioral and dataflow

register operations - procedural assignment (edge-sensitive)
combinational logic - level-sensitive

HDL operations
bitwise
reduction



5/17
===============
algorithmic state machines
    data-processing (combinational)
    control circuits (sequential)
        FSM

3 parts of the state machine
    state box
    decision box
    condition box

ASM chart

block diagram
sequence of operations

RTL description


5/24
=========
ASM chart
    conditional box

Binary Multiplier
