9/16
=====
grading policy
    hw 40%
	midterm 30%
	final 30%


what's an operating system?

Hello, world! (as an example)

application <-> hardware [ <-> user ]

a program that acts as an intermediary between an application and the computer hardware

context switch, mmu

controls and cordinates use of hardware

time slice!

provides a multi-user environment

cluster, distributed system

clouding computing


---

for components
hard ware
os
user
applications

northbridge, southbridge

hi-speed / low-speed peripherals

OS is a piece of program
resource allocator!
    decides between conflicting requests for efficient and fair resource use



kernel!

the one program running at all times on the computer is the kernel
everything else is either a system program or an application

C:\Windows\System32\ntoskrnl32.exe
http://en.wikipedia.org/wiki/Ntoskrnl

one or more CPUS/device controllers connect through common bus providing access to shared memory

concurrent execution of CPUs and devices competing for memory cycles


synchronization

each device controller has a local buffer
CPU moves data from/to main memory to/from device's local buffer
memory mapping
I/O is from the device to local buffer of controller
interrupt!
device controller informs CPU that is has finished its operation by causing an interrupt


interrupt vector
IRQ interrupt request

INT instruction

interrupt architecture must save the address of the interrputed instruction
incoming interrupts are disabled while another interrupt is being processed to prevent a lost interrupt
a trap is a software-generated interrupt caused either by an error or a user request
an operating system is "interrupt driven"

PIC controller -> timer interrupt


http://timetobleed.com/a-few-things-you-didnt-know-about-signals-in-linux-part-1/

I/O structure

after I/O starts, control returns to user program only upon I/O completion
wait instruction idles the CPU until the next interrupt
what loop (contention for memory access)
at most one I/O request is outstanding at a time, no simultaneous I/O processing

I/O multiplexing after I/O starts, control returns to user program without waiting for I/O completion

system call
    request to the operating system to allow user to wait for I/O completion
device status table

blocking I/O or serialized I/O
overlap or not?

select fd

PIO programmable I/O
DMA (direct memory access structure)
don't need CPU when data transfer

storage structure
main memory -> secondary storage -> magnetic disk
NCQ native command queue
hard disk - slow but cheap


speed / cost / volatility

caching


storage device hierarchy

important principle, performed at many levels in a computer
single general-purpose processor

parallel systems, tightly-coupled systems
increased throughput, economy of scale, increased reliability
graceful degradation / fault tolerance

asymmetric multiprocessing / symmetric multiprocessing

thread of execution
    data movement / instruction execution cycle / DMA





9/24
=======
clustered system
    sharing storage - storage-area network (SAN)
    asymmetric clustering
    symmetric clustering

    high-performance computing (HPC)
    parallelization


boostrap program
    ROM/EEPRPM -> firmware
    loads operating system kernel
    hardware provides the driving power
    operating system bring the power to system services / applicatoins


multiprogramming needed for efficiency
job scheduling
timesharing (multitasking)
response time should be < xxx msec
each user has at least one program executing in memory -> process
several jobs run at the same time -> CPI scheduling
swapping in/out
virtual memory

ex. when it has to wait (for I/O), OS switches to another job


interrupt / exception / trap
interrupt driven by hardware
software error creates exception
software request creates trap -> request for operating system service

dual mode
    user mode / kernel mode
    privileged -> only in kernel mode
    syscalls change mode to kernel, return from calls resets to user

os needs to protect itself

trap to kernel (mode bit will be changed)

process management
    a unit of work within the system
    program is a passive entity
    process is an active entity

process needs resources to accomplish its task
    CPU, memory, I/O
    initialization data

reclaim of any resable resources when processes terminations
single threaded process -> PC (program counter)
multi threaded process -> one PC per thread

typically system has many processes
concurrency by multiplexing the CPUs among the processes/threads


suspending and resuming
synchronization
communication
deadlock handling

memory management
memory allocation / free

storage management
file system management

file access

mass-storage

storage hierarchy


I/O subsystem
general device-driver interface
drivers for specific hardware devices

protection and security
uid gid


computing environments

client-server computing
p2p
mobile computing

resource allocation
accounting



9/26
=======

a view of operating system service
    kernel space
    user space


NTDLL.DLL
windows: some kernel ruins are in user space



setuid

top/passwd

user interface

CLI
    shells

GUI
    user friendly desptop metaphor interface

program execution

PE explorer www

disassemble

windgb


system call
    programming interface to the services provided by the OS
    most accessed by programs via a high-level application program interface API
    Win32 API / POSIX API

user mode <-> standard C library <-> kernel mode <-> write() system call


kernel32.dll






10/1
==============

API - syscall - OS relationship

user space <-> syscall <-> kernel space

printf() -> write()


IA32 LSTAR
KiSyscall64 -> the syscall entrance of Windows system

Win32API

unistd

syscall + eax -> 實現 system call

parameters pushed to the stack
popped off the stack

parameters in registers
parameters stored in a block/table/memory
address passed as a parameter in a register



block/stack method limit?

register based / stack based

calling conventions

ABI application binary interface


types of syscalls
    process control
    file management
    device management
    information maintenance
    IPC (inter-process communication)
    protection


MS-DOS
    layer structure


traditional unix system structure

microkernel?


virtual machine

legacy

emulator



10/3
==========

process concept

vmmap

process state
    new, running, waiting, ready, terminated

the state transiion diagram of process state

I/O waiting
scheduler dispatch

process control block (PCB)
    process state
    program counter
    cpu registers
    cpu scheduling information
    memory management information
    accounting information I/O status information

context switch



job queue
ready queue  - active
device queue - I/O


long term scheduler bring to ready queue
short term schedule (CPU scheduler) # milliseconds
midterm scheduling -> swap out

I/O bound / CPU bound

context






10/8
========
context switch

context of a process represented in the PCB

pid process identifier

resource sharing
execution
    parent and children execute concurrently
    parent waits until children terminate

address space
fork, exec

abort

cascading termination

independent, cooperating
    information sharing
    computation speed up
    modularity
    convenience
    shared memory
    message passing

IPC interprocess communication

producer/consumer model

message queue!

mailbox sharing

synchronization



buffering
    zero capacity
    bounded capacity
    unbounded capacity

socket
RPC

multithreading

responsiveness
resource sharing
economy
scalability



10/17 operating system
======================

I reload the page Orz

scheduler
IRQ
preemptive
dispatcher



dispatch latency time it takes for the dispatcher to stop one process and start another

switching address space
switching register and stack




### scheduling criteria
- throughput
    + high is better
- turnaround time
    + lower is better
- response time
    + lower is beter
- CPU utilization
    + keep the CPU as busy as possible
- waiting time
    + waiting in the ready queue


FCFS: first come, first serve


CPU burst / IO burst switching




FCFS convoy effect
    poor I/O utilization

SJF shortest job first
    non-preemptive / preemptive

but we don't know the real CPU burst
shortest remaining time first (SRTF)




how to determining the length of next cpu burst
    - only estimate the time QQ

SJF is optimal! gain in short > lost of long

exponential average




is it good enough?







10/24 operating system
==============

Critical section lock

out of order execution

intel 64 and IA-32 arch software developer's manual

atomic operations

hardware syncronization

atomic -> non-interruptable?





10/29
=======

spin-lock: busy waiting loop

testAndSet

swap instruction (xchg in x86)

guarantee the operation is atomic

bounded-waiting mutual exclusion

mutex: sleep waiting

semaphore: counting

    semaphore implementation
        block
        wakeup


10/31
=======

Halloween

semaphore

atomic wait and signal

monitors








11/5
=======

Hoare Style / Mesa Style

hoare style is slower

bounded buffer by monitor


solution to dining philosophers

condition variable

spinlocks on multiprocessor systems

Linux: semaphores / spin locks

deadlock

process resource allocation graph


11/7
======
deadlock characterization


    mutual exclusion
    hold and wait
    no preemption
    circular wait

resource allocation graph


prevention mechanism
    mutual exclusion
    hold and wait

deadlock avoidance

    define safe state


11/14
======
resource allocation graph scheme

