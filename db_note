database
    huge data

data modeling
database language
    SQL

relational database design principles

filesystem organizations
    indexing methods
    query optimization
transaction processing
recovery mechanisms
concurrency control

textbook
    database system concept 6/e

grading
    midterm, final 30/30
    homework10
    project 30
	    2-3 group

===
simple banking applicatoin
   need to store information about
        account


data in ASCII?
filesystem based solution

query
    
=====

2/22
data redundancy and inconsistency
    no control of redundancy
inconsistencies
    data in different files may not agree
    very critical issue

evolution of the database is hard
    delete? add?
    add new filed

atomicity problems
    must be atomic!
    can't crash during the operations

concurrent(並行) access anomalies
    來自不同的 query ，可以交錯進行

data abstraction
the key insight is data abstraction

view level
logical level
    provide an abstraction tables
physical level

data models
    conceptual representation of the data
data retrieval
    how to awk questions of the database
    how to answer those questions
data storage
    how/where to store data
    how to access it
data integrity
    manage crashes, concurrency
    semantic inconsistencies

reduced application development time and cost

data model
    physical data models, implementation data models, conceptual data models
    often relations 
    ER model, Entity–relationship model

conceptual data model uses
   entity: real world object or concept
   attribute: property of interest that further describes an antity
   relationship: represents an interaction among the entities

schema
    descript of a database
    specified duting database design
    is not expected to change frequently
    schema change
    intension of schema

schema diagram: displayed schema
schema construct: object in the schema
metadata: schema + constranints

database state (snapshot)
    data in the db at particular moment in time
    current set of occurrence or instances in the DB
    extension of schema

external view => conceptual schema => internal schema => physical

internal level
    internal schema
    describes 

data independency
    logical data independency
        change the conceptional schema without having to
        change external schemas or application programs
        only the view definition & the mapping need to be changed
    physical data independency

DDL data definition language: conceptional schema
SDL storage definition language: internal schema
VDL view definition language: view schema
DML data manipultaion language
SQL = DDL + VDL + DML + contraints + schema evolution


DML is the most important
high level DML
    nonprocedural, declarative
    specifies with data to be retrieved
    interactive or embedded in high level programming language
    set at a time?

low level DML
    procedural
    specifies how data to be retrieved
    record at time

2/26
========

DBMS interface
    dependent on what DB you chose XD

DBMS components modules
    DDL compiler
    Query compiler
    Precompiler
    DML compiler
    Runtime db processor
    concurrency control backup recovery subsystems
    stored data manager
    system catalog data dictionary
    stored database

classification of DBMS
model
    relational data model
    object
    hierachical
    network
user
    single user system
    multiuser system


sites
    dentralized
    distributed
    homogeneous
    heterogeneous

relation model
    set
    relation set: mathematical relation

data modeling
goals
    conceptual representation of the data
    reality eets "bits and bytes"
    must make sense, and be usable by other people

**entity relationship model
relation model (note the difference)

motivatoin

design steps
info
conceptual DB design
conceptual data model
logical DB design
logical data model
physical DB design
physical DB model


3/1
=======
database design concept

entities
    object :'exits' and 'distinguishable'
    attributes
    enrity set
    overlap

relationships
    relate 2 or more entities
    relationship
    can have attributes
    can involve more than 2 entities

relationship set is a mathematical relation aong n >= 2 entities, each taken from entity sets
    a link between entities

an attribute can also be property of a relationship set

ER Diagram
    Rectangles: entities sets
    Diamonds: relationship sets
    Ellipses: attributes

Key: some unique attribues
    underline

constraints/semantic information


relationship cardinalties
    representing this is important
    better manipulation of data
    can enforce such a constraint
    if not represented in conceptual model, the domain knowledge may be lost

mapping cardinalties
    one 2 one   <---->
    one 2 many  <-----
    many 2 one  ----->
    many 2 many ------
    # 有箭頭方向的是 one

describing binary relationship sets
    N-ary?
    盡量表示成二維

participation of an entity set (參與)
total participation (double line):
    every entity in the entity set participates in at least one relationship in the relationship set

partial participation
    some entities may not participate in any relationship in the relationship set

alternative notation for cadinality limits
    1..1 -> total participation   至少是零，至多是一
    0..* -> partial participation 可以為零，也沒有上限

types of attribues
simple and composite
    single value? multiple value?
    derived
    avoid redundancy, enforcing constraints (限制)

keys:
    set of attribues that uniquely identifies an antity or a relationship
    domain knowledge dependent

superkey
    any attribues set that can distinguish entities
candidate key (候選人)
    a minimal superkey
    can't remove any attribues and preserve keyness
    may be a set
primary key
    candidate key chosen as the key by DBA
    underlined in the ER Diagram

candidate ket is subset of superkey
primary is subset of candidate

relationship set key
    兩邊的 key 拿出來，然後加上自己的 attribue
    要可以 identify 某個 relationship

recursive relationship
    a relationship associates an entity set to itself

weak entity sets
    an entity set without enough attribues to have primary key
    多畫幾圈(?
    discriminator: 
        a set of attributes that can be used to discriminate in the transaction eneity set

    weak eneity sets' primary key: strong entity + discriminator attribute set

design principles
    Faithful
    satisties the application requirements
    models the requisite domain knowledge
    avoid redundancy (冗餘)
    go for simplicity

design issues
    depends on the semantics of the application


3/5
=======
entity sets vs attributes?

relation data model
    separation of logical, physical data models (data independence)
    declarative query language
    formal semantics
    query optimization

keys
    integrity constaints
    determing primary keys
    foreign keys

3/8
=======
basic relational model

er model -> relations

convert entity sets into a relational schema with the same set of attribues

at least (number of entities) tables

according to the relationship cardinality -> fewer tables

relation instance: the table

create table
not null
primary key

drop table
alter table -> extend table

IC integrity constranints (限制)
    condition that must be ture for ant instance of the database
    Eg. not null
    domain numeric
    check
    constranint name (optional)

Foreign keys
Referenctial Integrity
    不能亂 insert / delete 資料 (如果被引用到的話)

cascading delete: chain reaction

relation
select
project

selection
    SELECT * from x WHERE xxx
    欄位不便，資料比數變少

selection condition
attribute op constant / attribute1 op attribute2

projection
    取出其中幾個欄位出來
    降低維度

compositing operations
union
    如同數學上的 union
    R U S 等價 S U R
difference
    S-R

intersection
    交集


基本的六個 operator # 注意！intersection 不是！！
select
project
union 
set different
cartesian product
rename


3/12
========
product
想辦法使用基本的六個 operator 表示


join
    -> as cross-product followed by selections and sometimes with projections

condition join

找出全部的可能 (product) 然後  select 出特定條件

Equi-join
    join only equalities
Natural Join
    an Equi join on all common fields
    if two relations have no attributes in common, the result is simple the cross-product
division
    consider two relations A and B
    A has exactly two fields x and y
    B has just one field y, with the same domin as in A



3/22
============

query 練習
    and / or / not/ join

the relational model has rigorously defined query languages that are simple and powerful
relational algebra is operational useful  as an internal representation for query evaluation steps

typically there are several ways of expressing a given query  a query optimizer should choose an efficient

SQL string

    SELECT, INSERT, UPDATE, DELETE

DML, DDL, 
data manipulation language
    pose queries and to insert, delete, and modify rows
data definition language
    creation, deletion
view -> 邏輯上的 table

triggers and advanced integrity constraints

embedded dynamic SQL
    language binding
client/server
transaction management
    redo / undo
security

SELECT ...(distinct) target-list FROM relation-list WHERE qualification

relation-list: table? or a relation names
target-list: a list of attributes of relations in relation-list


找 table 然後 project 出來


3/26
==========

= 有機會可以換成  join

Union
兩個 select 的結果可以作 union
    a 結果 or b 結果
    -> 可以等價於 select 裡面的條件改成 or

intersect: compute the intersection of any two union-compatible sets of tuples
    可能不能換成 and (看條件)
    有的系統可能沒有 intersect 

except 除了...
    兩集合相減的概念

replace OR and AND using union/intersect

nested queries
    subquery

有時直接做 join 比做  nested queries 快

correlated nested queries

set comparison operators
    >, <, >=, <= ...
    ALL
    


3/29
============
rewriting queries
intersect -> in
except -> not in

division
some functions
    count() # 最常用來找資料的筆數
    AVG()
    MAX


4/2
===============
having
    對 group 作條件限制
SELECT "欄位1", SUM("欄位2") 
FROM "表格名" 
GROUP BY "欄位1" 
HAVING (函數條件)
被 SELECT 的只有函數欄， 那就不需要 GROUP BY 子句

Ex.
若我們要找出 Sales 大於 $1,500 的 store_name，我們就鍵入，
SELECT store_name, SUM(sales) 
FROM Store_Information 
GROUP BY store_name
HAVING SUM(sales) > 1500

Aggregate (聚集) operations cannot be nested!

temporary table

NULL value
    field value unknown (not been assigned yet)
    filed attribute inapplicable

Outer join
SELECT R.sid, R.bid FROM Sailors S NATURAL LEFT OUTER JOIN Reserves R
(sid, bid) for sailors and boats they have reserved
保證左邊的一定要在結果的 table 中出現，沒有的話填 NULL

all left relation rows appear in the result

也有
NATURAL RIGHT OUTER JOIN
all right relation rows appear in the result


Views
    取代 temp table (?)
    a view can be used just like a base table
    view is not explicitly stored in the database

    找不到 table 時別緊張，看看 view

OUTER JOIN
    FULL OUTER JOIN

general constraints
    useful when more general ICs than keys are involved
    can use queries to express constraint.

    CREATE TABLE .... CHECK (...)

    保證資料欄位的合法性


4/9
=========
constraint 條件在 create table 的時候

trigger example
    event driven?

unique

postgre 不支援 unique
exist, in, any, all

http://carweb.cs.nctu.edu.tw/phppgadmin (ninja) (?

4/26
=========
closure

if AG->HI is in F+?
    check if HI is in AG+

is AG a candidate key?


Boyce-Codd Normal Form BCNF
R is in BCNF if for any X -> A in F
  X->A is a trival functional dependency, A 包含於 X
   OR
  X is a superkey for R


Third Normal Form 3NF
BCNF tow rules
or
A is part of some key for R

the definitaion of 3NF is similar to that of BDNF with the only difference being the third condition.

If R is in BCNF, obviously it is in 3NF

a ket for relation is a minimal set of attributes that uniquely determines all other arrtibutes

decomposision

lossless join decomposision

canonical cover




4/30
==========
dependency set

dependency preservation
R - a relation schema
F - set of functional dependencies on R
{R1, R2} - a decomposition of R

Fi - the set of dependencies in F involving only attributes in Ri
Fi is called the projection of F on the set of attributes of Ri

dependency is preserved if (F1 U F2)+ = F+

Normalization
    converting relations to BCNF or 3NF
    if a relation schema is not in BCNF
       loseless
       未必有 dependency preservation
    3NF  兩者都有

BCNF decomposition
    先檢查是不是 BCNF
    suppose R is not in BCNF, A is an attribute, and X->A is a FD that violates the BDNF condition
    1. remove A from R
    2. decompose R into XA and R-A
    3. repeat this untill all relations become BCNF

    it is a lossless join decomposition
    not necessary dependency preserving

    X 在 XA 是 key (?

    拆 table~

    canonical cover

    a minimal and equivalent set of functional dependency

    F''' (?

    先找 F''' 才能找到 3NF


5/14
==========
disk
why not store every thing in dist
accessing disk page
    seek time 
    rotation delay
    transfer time

seek time : rotation delay : transfer time
is about 20:10:1 (?)


key to lower I/O cost: reduce seek/rotation delays

RAID

buffer management

    replacement policy

when a page is requested
    dirty page

predicted pages -> pre-fetch

pin count
concurrency control

replacement policy : Least recently used (LRU)

start + offset

system catalogs

fix-length / variable length

what is a file?

a collection of pages, each containing a collection of records.
    insert/delete/modify
    read a particular record
    scan all records

header page
linked-list

5/21
======
atomicity
consistency
isolation
durability


consistency
rest

assumption and goals
    the system can crash at any time
    the power can go out at any point
        contents of the memory -> bye
    disk are durable

transaction states
    active
    failed
    aboard
    partial commit
    commit

shadow copy

schedule
    serial schedule

serializable




    





