database
    huge data

data modeling
database language
    SQL

relational database design principles

filesystem organizations
    indexing methods
    query optimization
transaction processing
recovery mechanisms
concurrency control

textbook
    database system concept 6/e

grading
    midterm, final 30/30
    homework10
    project 30
	    2-3 group

===
simple banking applicatoin
   need to store information about
        account


data in ASCII?
filesystem based solution

query
    
=====

2/22
data redundancy and inconsistency
    no control of redundancy
inconsistencies
    data in different files may not agree
    very critical issue

evolution of the database is hard
    delete? add?
    add new filed

atomicity problems
    must be atomic!
    can't crash during the operations

concurrent(並行) access anomalies
    來自不同的 query ，可以交錯進行

data abstraction
the key insight is data abstraction

view level
logical level
    provide an abstraction tables
physical level

data models
    conceptual representation of the data
data retrieval
    how to awk questions of the database
    how to answer those questions
data storage
    how/where to store data
    how to access it
data integrity
    manage crashes, concurrency
    semantic inconsistencies

reduced application development time and cost

data model
    physical data models, implementation data models, conceptual data models
    often relations 
    ER model, Entity–relationship model

conceptual data model uses
   entity: real world object or concept
   attribute: property of interest that further describes an antity
   relationship: represents an interaction among the entities

schema
    descript of a database
    specified duting database design
    is not expected to change frequently
    schema change
    intension of schema

schema diagram: displayed schema
schema construct: object in the schema
metadata: schema + constranints

database state (snapshot)
    data in the db at particular moment in time
    current set of occurrence or instances in the DB
    extension of schema

external view => conceptual schema => internal schema => physical

internal level
    internal schema
    describes 

data independency
    logical data independency
        change the conceptional schema without having to
        change external schemas or application programs
        only the view definition & the mapping need to be changed
    physical data independency

DDL data definition language: conceptional schema
SDL storage definition language: internal schema
VDL view definition language: view schema
DML data manipultaion language
SQL = DDL + VDL + DML + contraints + schema evolution


DML is the most important
high level DML
    nonprocedural, declarative
    specifies with data to be retrieved
    interactive or embedded in high level programming language
    set at a time?

low level DML
    procedural
    specifies how data to be retrieved
    record at time

2/26
========

DBMS interface
    dependent on what DB you chose XD

DBMS components modules
    DDL compiler
    Query compiler
    Precompiler
    DML compiler
    Runtime db processor
    concurrency control backup recovery subsystems
    stored data manager
    system catalog data dictionary
    stored database

classification of DBMS
model
    relational data model
    object
    hierachical
    network
user
    single user system
    multiuser system


sites
    dentralized
    distributed
    homogeneous
    heterogeneous

relation model
    set
    relation set: mathematical relation

data modeling
goals
    conceptual representation of the data
    reality eets "bits and bytes"
    must make sense, and be usable by other people

**entity relationship model
relation model (note the difference)

motivatoin

design steps
info
conceptual DB design
conceptual data model
logical DB design
logical data model
physical DB design
physical DB model


3/1
=======
database design concept

entities
    object :'exits' and 'distinguishable'
    attributes
    enrity set
    overlap

relationships
    relate 2 or more entities
    relationship
    can have attributes
    can involve more than 2 entities

relationship set is a mathematical relation aong n >= 2 entities, each taken from entity sets
    a link between entities

an attribute can also be property of a relationship set

ER Diagram
    Rectangles: entities sets
    Diamonds: relationship sets
    Ellipses: attributes

Key: some unique attribues
    underline

constraints/semantic information


relationship cardinalties
    representing this is important
    better manipulation of data
    can enforce such a constraint
    if not represented in conceptual model, the domain knowledge may be lost

mapping cardinalties
    one 2 one   <---->
    one 2 many  <-----
    many 2 one  ----->
    many 2 many ------
    # 有箭頭方向的是 one

describing binary relationship sets
    N-ary?
    盡量表示成二維

participation of an entity set (參與)
total participation (double line):
    every entity in the entity set participates in at least one relationship in the relationship set

partial participation
    some entities may not participate in any relationship in the relationship set

alternative notation for cadinality limits
    1..1 -> total participation   至少是零，至多是一
    0..* -> partial participation 可以為零，也沒有上限

types of attribues
simple and composite
    single value? multiple value?
    derived
    avoid redundancy, enforcing constraints (限制)

keys:
    set of attribues that uniquely identifies an antity or a relationship
    domain knowledge dependent

superkey
    any attribues set that can distinguish entities
candidate key (候選人)
    a minimal superkey
    can't remove any attribues and preserve keyness
    may be a set
primary key
    candidate key chosen as the key by DBA
    underlined in the ER Diagram

candidate ket is subset of superkey
primary is subset of candidate

relationship set key
    兩邊的 key 拿出來，然後加上自己的 attribue
    要可以 identify 某個 relationship

recursive relationship
    a relationship associates an entity set to itself

weak entity sets
    an entity set without enough attribues to have primary key
    多畫幾圈(?
    discriminator: 
        a set of attributes that can be used to discriminate in the transaction eneity set

    weak eneity sets' primary key: strong entity + discriminator attribute set

design principles
    Faithful
    satisties the application requirements
    models the requisite domain knowledge
    avoid redundancy (冗餘)
    go for simplicity

design issues
    depends on the semantics of the application



