9/16
======

真實人生不是布袋戲

莫再提計算理論...

textbook:
    Introduction to the Theory of Comutation 2/e or 3/e

Automata and Langaage
    Regular Language
    Context-free Language

computability theroy
    Church-Turing Thesis
    Decidablility
    Reducibility
    Advanced Topics in Computablility Theory

complexity theory
    time complexity

Grading policy
midterm 30%
    Ch. 1
midterm 30%
    Ch. 2
Final 40%
    Ch. 3 4 5 7



Types of Proof
    Proof by construction
        many theorems state that a particular type of object exists
    Proof by contradiction (歸謬)
        assume that the theroem is false, and then show that this assumption leads to
        an obviously false consequence
    Proof by induction
        basis
        hypothesis
        induction step


Regular Langauges
    RL -> DFA -> NFA -> RE

if we can find a DFA that accept all sets in  Language L, that is, L is regular
DFA <-> NFA

Deterministic finite automaton
A DFA representing a regular language can be used either in an accepting mode to validate that
an input string is part of the language, or in a generating mode to generate a list of all the
strings in the language.


Finite automata

state transision table
state diagram

a deterministic finite automation is a 5-tuple (Q, sigma, delta, q0, F)
    Q : a finite set called the states
    Σ : a finite set called the alphabet
    δ : Qxsigma -> Q is the transition function, exactily one resultant state
    q0 in Q: is the start state
    F in Q: is the set of accept states (final states)


L(M) = A
M recognizes A (M accepts A)
A is the set of all strings that M accepts



please show your proof clearly!

RE!




9/18
=====
deterministric <-> non-deterministric

start state will get the first alphabet of input stream

delta (transision function) can be reprecented as a table
last if the state is F (final state), then the machine accepts the input stream


M = (Q, sigma, delta, q0, F)
w: a string over sigma, wi in sigma

M accepts w if a sequence of states r0, r1, ..., rn exists in Q and satisfies the following 3 conditions:
    r0 = q0
    delta(ri, wi+1) = ri+1, for i = 0..n-1
    rn in F


M recognizes language A if A = {w| M accepts w}

definition: a language is called a regular language if some DFA recognize it (one or more)

so, if we can construct a DFA that accepts L, then we can proof L is regular

Q: how can we proof if L is not regular?

[pumping lemma](http://en.wikipedia.org/wiki/Pumping_lemma_for_regular_languages)


DFA: only can memorize states (limited memory)


regular operations

A, B: language
Union, concatenation, star
A U B = {x | x in A or x in B}
A . B = {xy | x in A and y in B}
A* = {x1x2x3...xk | k >= 0 and each xi in A}   # A concatenate A


The class of regular languages is closed under the union operation





9/23
=======
Union, concatenation, star

unreachable state -> not-optimized machine

ε -> empty string

A* include ε!!

Proof: Union's closed property

Don't assume M1 and M2
the most important part is δ (the transition function)


Q = {(r1, r2) | r1 in Q1 and r2 in Q2}
Σ is the same in M1, M2
for each (r1, r2) in Q and each a in Σ, let
δ((r1, r2), a) = (δ(r1, a), δ(r2, a))
# Q's next state = (r1, r2) gets an 'a', that is r1 gets 'a' and r2 gets 'a'
# and then make them a tuple

q0=(q1, q2)
F={(r1, r2)|r1 in F1 or r2 in F2}

學會懷疑


NFA
non-deterministric finite automata

similar transition
    when get the same input-alphabet, may have zero-or-more result
    multiple choices

ε transition
    get 'nothing' but go through to the next state

NFA 就是個 gal-game 啊XDDDDD
    reject -> bad end
    accept -> good end

notice the ε transition!

NFA may have a infinity loop, don't use DFS!

你永遠跳不到 beta 世界線 *哭*

同學你書念太多惹，回去休息吧！ *哭*

A nondeterministic finite automaton (NFA) is a 5-tuple ( Q, Σ, δ, q0, F), where

Q : a finite set of states
Σ : a finite set of alphabet
q0 in Q : start state
F in Q : the set of accept states

δ : QxΣ -> P(Q) transition function
The resultant state set may contain zero, one, or more states

Σε = Σ U {ε}                               # ε transition
P(Q) : the collection of all subset of Q   # similar transition
# here, P means powerset


φ  in transition function means nowhere to go, that is, reject

ε transition 隨意塞(?



---




Equivalence of NFA and DFA
Every NFA has an equivalent DFA

DFA 就是 NFA 的其中一個 special case

trivial -> BJ4

Pf. let N=( Q, Σ, δ, q0, F) be the NFA recognizing A
goal: construct a DFA recognizing A, too

** don't consider ε
1. Q' = P(Q)           # power set of Q
2. For R in Q' and a in Σ, let δ'(R, a) = {q in Q | q in δ(r, a), where r in R}
   that is, δ'(R, a_ = all r in R, union δ(r, a)

3. q0' = {q0}
4. F' = {R in Q' | R contains an accept state of N}
# 含有 NFA 中的 final state 者就把他算做是 DFA 的 final state

** consider ε
For any R in M, define
E(R) = {q| q can be reached from R by traveling along 0 or more ε}
δ'(R, a)={q in Q | q in E(δ(r, a)) for some r in R}
# 透過 ε 摸的到的全部都要算

change q0' to be E({q0})

double checking all ε transition carefully

No incoming edge, unused state -> remove

其實 DFA 的集合就是把 NFA 拆開可能包含的 states



-----


closure under the regular operations




union: 拉兩個 ε 過去 A1 和 A2
concatenate: 把 A1 的 final states 拉 ε 過去 A2 的 start state
star: 考慮 {} (空集合) ε 拉個 ε 到原來的 start state
      把 A1 的 final state 拉 ε 回原來的 start state


----

Formal definition of a regular expression

R is a RE if R is

a in Σ
ε
φ
# R1 and R2 are regular
R1 U R2
R1 . R2
R1*

** inductive definition

R = a in Σ, L(R) = {a}
R = ε, L(R) = {ε}
R = φ,, L(R) = φ





9/25
=======

DFA / NFA equivalent

consider similar transition first, then ε transition

A language is regular if and only if some regular expression describes it
(regular language <-> regular expression <-> NFA/DFA)

Lemma:
if a language is described by a regular expression then it is regular

Proof:
let R be a regular expression describing some language A
Goal: Convert R into an NFA N

拿 element 做出 basis 的 NFA，之後套用 union / concatenate / star 串起來





GNFA - generalized nondeterministic finite automaton is a 5-tuple

( Q, Σ, δ, q_start, q_accept)

Q is the finite set of states
Σ is the input alphabet
q_start is the start state
q_accept is the accept state.
    - exactly one accept state
    - q_accept is not the same as q_start

δ : (Q - {q_accept}) x (Q - {q_start}) -> R  # R is the set of all RE over Σ
δ (qi, qj) = R


Lemma:
If a language is regular, then it is described by a regular expression

Proof:
A language L is regular -> There is a DFA M accepting L
Goal: Convert DFAs into equivalent regular expressions


GNFA G -> Convert -> regular expression
Convert(G) : takes a GNFA and return an equivalent regular expression






9/30
=======
regular expression

given a regular expression, construct a NFA that accepts it

GNFA concept
the nfa from GNFA maybe have multiple or zero final state

add ε transitions in old final state(s) to the new final state
   make exactly one final state



pumping lemma
    if A is a regular language, then there's a number P (pumping length) where
    if s is any string in A of length >= P
    then s may be divided into 3 pieces, satisfying some conditions
    for each i>=0, xyiz in A
    y's length > 0
    xy length <= P


if you think it's not regular, try pumping lemme lol

suppose some language is regular
let P be the pumping length
generate a string s, that satisfying the conditions



contradiction



10/2
===========

We'll have a mid-term after Ch. 1
Ahhhhhhhhh

Pumping lemma is very important

closure property in regular languages

basic:
    union
    concatenation
    star


intersection
complement
difference
reversal
homomorphism
inverse homomorphism

proofs


construct E = E1 op E2, where op = union, concatenate, star

using a recursion/induction method

basis, hypothesis, induction stop


